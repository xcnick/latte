syntax = "proto3";

import "google/protobuf/wrappers.proto";

package latte;

// Specifies the shape (dimensions) of a Blob.
message BlobShape {
  repeated int64 dim = 1;
}

message BlobProto {
  BlobShape shape = 1;
  repeated float data = 2;
  repeated double double_data = 3;
}

// The BlobProtoVector is simply a way to pass multiple blobproto instances
// around.
message BlobProtoVector {
  repeated BlobProto blobs = 1;
}

message Datum {
  int32 channels = 1;
  int32 height = 2;
  int32 width = 3;
  // the actual image data, in bytes
  bytes data = 4;
  int32 label = 5;
  // Optionally, the datum could also hold float data.
  repeated float float_data = 6;
  // If true data contains an encoded image that need to be decoded
  bool encoded = 7;
}

message FillerParameter {
  oneof type_oneof{
    string type = 1;
  }
  float value = 2;   // the value in constant filler
  float min = 3;     // the min value in uniform filler
  oneof max_oneof {
    float max = 4;     // the max value in uniform filler
  }
  float mean = 5;    // the mean value in Gaussian filler
  oneof std_oneof {
    float std = 6;     // the std value in Gaussian filler
  }
  // The expected number of non-zero output weights for a given input in
  // Gaussian filler -- the default -1 means don't perform sparsification.
  oneof sparse_oneof {
    int32 sparse = 7;
  }
  // Normalize the filler variance by fan_in, fan_out, or their average.
  // Applies to 'xavier' and 'msra' fillers.
  enum VarianceNorm {
    FAN_IN = 0;
    FAN_OUT = 1;
    AVERAGE = 2;
  }
  VarianceNorm variance_norm = 8;
}

message NetParameter {
  string name = 1; // consider giving the network a name
  // The current "state" of the network, including the level, and stage.
  // Some layers may be included/excluded depending on this state and the states
  // specified in the layers' include and exclude fields.
  NetState state = 2;
  // Print debugging information about results while running Net::Forward,
  google.protobuf.BoolValue debug_info = 3;

  // The layers that make up the net.  Each of their configurations, including
  // connectivity and behavior, is specified as a LayerParameter.
  repeated LayerParameter layer = 100;  // ID 100 so layers are printed last.
}

message NetState {
  int32 level = 2;
  repeated string stage = 3;
}

message NetStateRule {
  // Set the minimum and/or maximum levels in which the layer should be used.
  // Leave undefined to meet the rule regardless of level.
  google.protobuf.Int32Value min_level = 1;
  google.protobuf.Int32Value max_level = 2;

  // Customizable sets of stages to include or exclude.
  // The net must have ALL of the specified stages and NONE of the specified
  // "not_stage"s to meet the rule.
  // (Use multiple NetStateRules to specify conjunctions of stages.)
  repeated string stage = 3;
  repeated string not_stage = 4;
}

// NOTE
// Update the next available ID when you add a new LayerParameter field.
//
// LayerParameter next available layer-specific ID: 149 (last added: clip_param)
message LayerParameter {
  string name = 1; // the layer name
  string type = 2; // the layer type
  repeated string bottom = 3; // the name of each bottom blob
  repeated string top = 4; // the name of each top blob

  // The blobs containing the numeric parameters of the layer.
  repeated BlobProto blobs = 5;

  // Rules controlling whether and when a layer is included in the network,
  // based on the current NetState.  You may specify a non-zero number of rules
  // to include OR exclude, but not both.  If no include or exclude rules are
  // specified, the layer is always included.  If the current NetState meets
  // ANY (i.e., one or more) of the specified rules, the layer is
  // included/excluded.
  repeated NetStateRule include = 6;
  repeated NetStateRule exclude = 7;

  // Layer type-specific parameters.
  //
  // Note: certain layers may have more than one computational engine
  // for their implementation. These layers include an Engine type and
  // engine parameter for selecting the implementation.
  // The default for the engine is set by the ENGINE switch at compile-time.
  AccuracyParameter accuracy_param = 102;
  ArgMaxParameter argmax_param = 103;
  BatchNormParameter batch_norm_param = 139;
  BiasParameter bias_param = 141;
  ClipParameter clip_param = 148;
  ConcatParameter concat_param = 104;
  ContrastiveLossParameter contrastive_loss_param = 105;
  ConvolutionParameter convolution_param = 106;
  CropParameter crop_param = 144;
  DataParameter data_param = 107;
  DropoutParameter dropout_param = 108;
  DummyDataParameter dummy_data_param = 109;
  EltwiseParameter eltwise_param = 110;
  ELUParameter elu_param = 140;
  EmbedParameter embed_param = 137;
  ExpParameter exp_param = 111;
  FlattenParameter flatten_param = 135;
  HingeLossParameter hinge_loss_param = 114;
  ImageDataParameter image_data_param = 115;
  InfogainLossParameter infogain_loss_param = 116;
  InnerProductParameter inner_product_param = 117;
  InputParameter input_param = 143;
  LogParameter log_param = 134;
  LRNParameter lrn_param = 118;
  MemoryDataParameter memory_data_param = 119;
  MVNParameter mvn_param = 120;
  ParameterParameter parameter_param = 145;
  PoolingParameter pooling_param = 121;
  PowerParameter power_param = 122;
  PReLUParameter prelu_param = 131;
  PythonParameter python_param = 130;
  RecurrentParameter recurrent_param = 146;
  ReductionParameter reduction_param = 136;
  ReLUParameter relu_param = 123;
  ReshapeParameter reshape_param = 133;
  ScaleParameter scale_param = 142;
  SigmoidParameter sigmoid_param = 124;
  SoftmaxParameter softmax_param = 125;
  SPPParameter spp_param = 132;
  SliceParameter slice_param = 126;
  SwishParameter swish_param = 147;
  TanHParameter tanh_param = 127;
  ThresholdParameter threshold_param = 128;
  TileParameter tile_param = 138;
  WindowDataParameter window_data_param = 129;
}

// Messages that store parameters used by individual layer types follow, in
// alphabetical order.

message AccuracyParameter {
  // When computing accuracy, count as correct by comparing the true label to
  // the top k scoring classes.  By default, only compare to the top scoring
  // class (i.e. argmax).
  uint32 top_k = 1;

  // The "label" axis of the prediction blob, whose argmax corresponds to the
  // predicted label -- may be negative to index from the end (e.g., -1 for the
  // last axis).  For example, if axis == 1 and the predictions are
  // (N x C x H x W), the label blob is expected to contain N*H*W ground truth
  // labels with integer values in {0, 1, ..., C-1}.
  int32 axis = 2;

  // If specified, ignore instances with the given label.
  int32 ignore_label = 3;
}

message ArgMaxParameter {
  // If true produce pairs (argmax, maxval)
  bool out_max_val = 1;
  uint32 top_k = 2;
  // The axis along which to maximise -- may be negative to index from the
  // end (e.g., -1 for the last axis).
  // By default ArgMaxLayer maximizes over the flattened trailing dimensions
  // for each index of the first / num dimension.
  int32 axis = 3;
}

// Message that stores parameters used by ClipLayer
message ClipParameter {
  float min = 1;
  float max = 2;
}

message ConcatParameter {
  // The axis along which to concatenate -- may be negative to index from the
  // end (e.g., -1 for the last axis).  Other axes must have the
  // same dimension for all the bottom blobs.
  // By default, ConcatLayer concatenates blobs along the "channels" axis (1).
  int32 axis = 2;
}

message BatchNormParameter {
  // If false, normalization is performed over the current mini-batch
  // and global statistics are accumulated (but not yet used) by a moving
  // average.
  // If true, those accumulated mean and variance values are used for the
  // normalization.
  // By default, it is set to false when the network is in the training
  // phase and true when the network is in the testing phase.
  bool use_global_stats = 1;
  // What fraction of the moving average remains each iteration?
  // Smaller values make the moving average decay faster, giving more
  // weight to the recent values.
  // Each iteration updates the moving average @f$S_{t-1}@f$ with the
  // current mean @f$ Y_t @f$ by
  // @f$ S_t = (1-\beta)Y_t + \beta \cdot S_{t-1} @f$, where @f$ \beta @f$
  // is the moving_average_fraction parameter.
  float moving_average_fraction = 2;
  // Small value to add to the variance estimate so that we don't divide by
  // zero.
  float eps = 3;
}

message BiasParameter {
  // The first axis of bottom[0] (the first input Blob) along which to apply
  // bottom[1] (the second input Blob).  May be negative to index from the end
  // (e.g., -1 for the last axis).
  //
  // For example, if bottom[0] is 4D with shape 100x3x40x60, the output
  // top[0] will have the same shape, and bottom[1] may have any of the
  // following shapes (for the given value of axis):
  //    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
  //    (axis == 1 == -3)          3;     3x40;     3x40x60
  //    (axis == 2 == -2)                   40;       40x60
  //    (axis == 3 == -1)                                60
  // Furthermore, bottom[1] may have the empty shape (regardless of the value of
  // "axis") -- a scalar bias.
  int32 axis = 1;

  // (num_axes is ignored unless just one bottom is given and the bias is
  // a learned parameter of the layer.  Otherwise, num_axes is determined by the
  // number of axes by the second bottom.)
  // The number of axes of the input (bottom[0]) covered by the bias
  // parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
  // Set num_axes := 0, to add a zero-axis Blob: a scalar.
  int32 num_axes = 2;

  // (filler is ignored unless just one bottom is given and the bias is
  // a learned parameter of the layer.)
  // The initialization for the learned bias parameter.
  // Default is the zero (0) initialization, resulting in the BiasLayer
  // initially performing the identity operation.
  FillerParameter filler = 3;
}

message ContrastiveLossParameter {
  // margin for dissimilar pair
  float margin = 1;
  // The first implementation of this cost did not exactly match the cost of
  // Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
  // legacy_version = false (the default) uses (margin - d)^2 as proposed in the
  // Hadsell paper. New models should probably use this version.
  // legacy_version = true uses (margin - d^2). This is kept to support /
  // reproduce existing models and results
  bool legacy_version = 2;
}

message ConvolutionParameter {
  uint32 num_output = 1; // The number of outputs for the layer
  bool bias_term = 2; // whether to have bias terms

  // Pad, kernel size, and stride are all given as a single value for equal
  // dimensions in all spatial dimensions, or once per spatial dimension.
  repeated uint32 pad = 3; // The padding size; defaults to 0
  repeated uint32 kernel_size = 4; // The kernel size
  repeated uint32 stride = 6; // The stride; defaults to 1
  // Factor used to dilate the kernel, (implicitly) zero-filling the resulting
  // holes. (Kernel dilation is sometimes referred to by its use in the
  // algorithme à trous from Holschneider et al. 1987.)
  repeated uint32 dilation = 18; // The dilation; defaults to 1

  // For 2D convolution only, the *_h and *_w versions may also be used to
  // specify both spatial dimensions.
  uint32 pad_h = 9; // The padding height (2D only)
  uint32 pad_w = 10; // The padding width (2D only)
  uint32 kernel_h = 11; // The kernel height (2D only)
  uint32 kernel_w = 12; // The kernel width (2D only)
  uint32 stride_h = 13; // The stride height (2D only)
  uint32 stride_w = 14; // The stride width (2D only)

  uint32 group = 5; // The group size for group conv

  FillerParameter weight_filler = 7; // The filler for the weight
  FillerParameter bias_filler = 8; // The filler for the bias
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 15;

  // The axis to interpret as "channels" when performing convolution.
  // Preceding dimensions are treated as independent inputs;
  // succeeding dimensions are treated as "spatial".
  // With (N, C, H, W) inputs, and axis == 1 (the default), we perform
  // N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
  // groups g>1) filters across the spatial axes (H, W) of the input.
  // With (N, C, D, H, W) inputs, and axis == 1, we perform
  // N independent 3D convolutions, sliding (C/g)-channels
  // filters across the spatial axes (D, H, W) of the input.
  int32 axis = 16;

  // Whether to force use of the general ND convolution, even if a specific
  // implementation for blobs of the appropriate number of spatial dimensions
  // is available. (Currently, there is only a 2D-specific convolution
  // implementation; for input blobs with num_axes != 2, this option is
  // ignored and the ND implementation will be used.)
  bool force_nd_im2col = 17;
}

message CropParameter {
  // To crop, elements of the first bottom are selected to fit the dimensions
  // of the second, reference bottom. The crop is configured by
  // - the crop `axis` to pick the dimensions for cropping
  // - the crop `offset` to set the shift for all/each dimension
  // to align the cropped bottom with the reference bottom.
  // All dimensions up to but excluding `axis` are preserved, while
  // the dimensions including and trailing `axis` are cropped.
  // If only one `offset` is set, then all dimensions are offset by this amount.
  // Otherwise, the number of offsets must equal the number of cropped axes to
  // shift the crop in each dimension accordingly.
  // Note: standard dimensions are N,C,H,W so the default is a spatial crop,
  // and `axis` may be negative to index from the end (e.g., -1 for the last
  // axis).
  int32 axis = 1;
  repeated uint32 offset = 2;
}

message DataParameter {
  enum DB {
    LEVELDB = 0;
    LMDB = 1;
  }
  // Specify the data source.
  string source = 1;
  // Specify the batch size.
  uint32 batch_size = 4;
  DB backend = 8;
  string mean_file = 3;
  // Force the encoded image to have 3 color channels
  bool force_encoded_color = 9;
  // Prefetch queue (Increase if data feeding bandwidth varies, within the
  // limit of device memory for GPU training)
  uint32 prefetch = 10;
}

message DropoutParameter {
  float dropout_ratio = 1; // dropout ratio
}

// DummyDataLayer fills any number of arbitrarily shaped blobs with random
// (or constant) data generated by "Fillers" (see "message FillerParameter").
message DummyDataParameter {
  // This layer produces N >= 1 top blobs.  DummyDataParameter must specify 1 or N
  // shape fields, and 0, 1 or N data_fillers.
  //
  // If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
  // If 1 data_filler is specified, it is applied to all top blobs.  If N are
  // specified, the ith is applied to the ith top blob.
  repeated FillerParameter data_filler = 1;
  repeated BlobShape shape = 2;
}

message EltwiseParameter {
  enum EltwiseOp {
    PROD = 0;
    SUM = 1;
    MAX = 2;
  }
  EltwiseOp operation = 1; // element-wise operation
  repeated float coeff = 2; // blob-wise coefficient for SUM operation

  // Whether to use an asymptotically slower (for >2 inputs) but stabler method
  // of computing the gradient for the PROD operation. (No effect for SUM op.)
  bool stable_prod_grad = 3;
}

// Message that stores parameters used by ELULayer
message ELUParameter {
  // Described in:
  // Clevert, D.-A., Unterthiner, T., & Hochreiter, S. (2015). Fast and Accurate
  // Deep Network Learning by Exponential Linear Units (ELUs). arXiv
  float alpha = 1;
}

// Message that stores parameters used by EmbedLayer
message EmbedParameter {
  uint32 num_output = 1; // The number of outputs for the layer
  // The input is given as integers to be interpreted as one-hot
  // vector indices with dimension num_input.  Hence num_input should be
  // 1 greater than the maximum possible input value.
  uint32 input_dim = 2;

  bool bias_term = 3; // Whether to use a bias term
  FillerParameter weight_filler = 4; // The filler for the weight
  FillerParameter bias_filler = 5; // The filler for the bias

}

// Message that stores parameters used by ExpLayer
message ExpParameter {
  // ExpLayer computes outputs y = base ^ (shift + scale * x), for base > 0.
  // Or if base is set to the default (-1), base is set to e,
  // so y = exp(shift + scale * x).
  float base = 1;
  float scale = 2;
  float shift = 3;
}

/// Message that stores parameters used by FlattenLayer
message FlattenParameter {
  // The first axis to flatten: all preceding axes are retained in the output.
  // May be negative to index from the end (e.g., -1 for the last axis).
  int32 axis = 1;

  // The last axis to flatten: all following axes are retained in the output.
  // May be negative to index from the end (e.g., the default -1 for the last
  // axis).
  int32 end_axis = 2;
}

message HingeLossParameter {
  enum Norm {
    L1 = 0;
    L2 = 1;
  }
  // Specify the Norm to use L1 or L2
  Norm norm = 1;
}

message ImageDataParameter {
  // Specify the data source.
  string source = 1;
  // Specify the batch size.
  uint32 batch_size = 4;
  // The rand_skip variable is for the data layer to skip a few data points
  // to avoid all asynchronous sgd clients to start at the same point. The skip
  // point would be set as rand_skip * rand(0,1). Note that rand_skip should not
  // be larger than the number of keys in the database.
  uint32 rand_skip = 7;
  // Whether or not ImageLayer should shuffle the list of files at every epoch.
  bool shuffle = 8;
  // It will also resize images if new_height or new_width are not zero.
  uint32 new_height = 9;
  uint32 new_width = 10;
  // Specify if the images are color or gray
  bool is_color = 11;
  string mean_file = 3;
  string root_folder = 12;
}

message InfogainLossParameter {
  // Specify the infogain matrix source.
  string source = 1;
  int32 axis = 2; // axis of prob
}

message InnerProductParameter {
  uint32 num_output = 1;                        // The number of outputs for the layer
  google.protobuf.BoolValue bias_term = 2;      // whether to have bias terms
  FillerParameter weight_filler = 3;            // The filler for the weight
  FillerParameter bias_filler = 4;              // The filler for the bias

  // The first axis to be lumped into a single inner product computation;
  // all preceding axes are retained in the output.
  // May be negative to index from the end (e.g., -1 for the last axis).
  google.protobuf.Int32Value axis = 5;
  // Specify whether to transpose the weight matrix or not.
  // If transpose == true, any operations will be performed on the transpose
  // of the weight matrix. The weight matrix itself is not going to be transposed
  // but rather the transfer flag of operations will be toggled accordingly.
  google.protobuf.BoolValue transpose = 6;
}

message InputParameter {
  // This layer produces N >= 1 top blob(s) to be assigned manually.
  // Define N shapes to set a shape for each top.
  // Define 1 shape to set the same shape for every top.
  // Define no shape to defer to reshaping manually.
  repeated BlobShape shape = 1;
}

// Message that stores parameters used by LogLayer
message LogParameter {
  // LogLayer computes outputs y = log_base(shift + scale * x), for base > 0.
  // Or if base is set to the default (-1), base is set to e,
  // so y = ln(shift + scale * x) = log_e(shift + scale * x)
  float base = 1;
  float scale = 2;
  float shift = 3;
}

// Message that stores parameters used by LRNLayer
message LRNParameter {
  uint32 local_size = 1;
  float alpha = 2;
  float beta = 3;
  enum NormRegion {
    ACROSS_CHANNELS = 0;
    WITHIN_CHANNEL = 1;
  }
  NormRegion norm_region = 4;
  float k = 5;
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 6;
}

message MemoryDataParameter {
  uint32 batch_size = 1;
  uint32 channels = 2;
  uint32 height = 3;
  uint32 width = 4;
}

message MVNParameter {
  // This parameter can be set to false to normalize mean only
  bool normalize_variance = 1;

  // This parameter can be set to true to perform DNN-like MVN
  bool across_channels = 2;

  // Epsilon for not dividing by zero while normalizing variance
  float eps = 3;
}

message ParameterParameter {
  BlobShape shape = 1;
}

message PoolingParameter {
  enum PoolMethod {
    MAX = 0;
    AVE = 1;
    STOCHASTIC = 2;
  }
  PoolMethod pool = 1; // The pooling method
  // Pad, kernel size, and stride are all given as a single value for equal
  // dimensions in height and width or as Y, X pairs.
  uint32 pad = 4; // The padding size (equal in Y, X)
  uint32 pad_h = 9; // The padding height
  uint32 pad_w = 10; // The padding width
  uint32 kernel_size = 2; // The kernel size (square)
  uint32 kernel_h = 5; // The kernel height
  uint32 kernel_w = 6; // The kernel width
  uint32 stride = 3; // The stride (equal in Y, X)
  uint32 stride_h = 7; // The stride height
  uint32 stride_w = 8; // The stride width
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 11;
  // If global_pooling then it will pool over the size of the bottom by doing
  // kernel_h = bottom->height and kernel_w = bottom->width
  bool global_pooling = 12;
  // How to calculate the output size - using ceil (default) or floor rounding.
  enum RoundMode {
    CEIL = 0;
    FLOOR = 1;
  }
  RoundMode round_mode = 13;
}

message PowerParameter {
  // PowerLayer computes outputs y = (shift + scale * x) ^ power.
  float power = 1;
  float scale = 2;
  float shift = 3;
}

message PythonParameter {
  string module = 1;
  string layer = 2;
  // This value is set to the attribute `param_str` of the `PythonLayer` object
  // in Python before calling the `setup()` method. This could be a number,
  // string, dictionary in Python dict format, JSON, etc. You may parse this
  // string in `setup` method and use it in `forward` and `backward`.
  string param_str = 3;
}

// Message that stores parameters used by RecurrentLayer
message RecurrentParameter {
  // The dimension of the output (and usually hidden state) representation --
  // must be explicitly set to non-zero.
  uint32 num_output = 1;

  FillerParameter weight_filler = 2; // The filler for the weight
  FillerParameter bias_filler = 3; // The filler for the bias

  // Whether to enable displaying debug_info in the unrolled recurrent net.
  bool debug_info = 4;

  // Whether to add as additional inputs (bottoms) the initial hidden state
  // blobs, and add as additional outputs (tops) the final timestep hidden state
  // blobs.  The number of additional bottom/top blobs required depends on the
  // recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
  bool expose_hidden = 5;
}

// Message that stores parameters used by ReductionLayer
message ReductionParameter {
  enum ReductionOp {
    SUM = 0;
    ASUM = 1;
    SUMSQ = 2;
    MEAN = 3;
  }

  ReductionOp operation = 1; // reduction operation

  // The first axis to reduce to a scalar -- may be negative to index from the
  // end (e.g., -1 for the last axis).
  // (Currently, only reduction along ALL "tail" axes is supported; reduction
  // of axis M through N, where N < num_axes - 1, is unsupported.)
  // Suppose we have an n-axis bottom Blob with shape:
  //     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
  // If axis == m, the output Blob will have shape
  //     (d0, d1, d2, ..., d(m-1)),
  // and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
  // times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
  // If axis == 0 (the default), the output Blob always has the empty shape
  // (count 1), performing reduction across the entire input --
  // often useful for creating new loss functions.
  int32 axis = 2;

  float coeff = 3; // coefficient for output
}

// Message that stores parameters used by ReLULayer
message ReLUParameter {
  // Allow non-zero slope for negative inputs to speed up optimization
  // Described in:
  // Maas, A. L., Hannun, A. Y., & Ng, A. Y. (2013). Rectifier nonlinearities
  // improve neural network acoustic models. In ICML Workshop on Deep Learning
  // for Audio, Speech, and Language Processing.
  float negative_slope = 1;
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 2;
}

message ReshapeParameter {
  // Specify the output dimensions. If some of the dimensions are set to 0,
  // the corresponding dimension from the bottom layer is used (unchanged).
  // Exactly one dimension may be set to -1, in which case its value is
  // inferred from the count of the bottom blob and the remaining dimensions.
  // For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
  //
  //   layer {
  //     type: "Reshape" bottom: "input" top: "output"
  //     reshape_param { ... }
  //   }
  //
  // If "input" is 2D with shape 2 x 8, then the following reshape_param
  // specifications are all equivalent, producing a 3D blob "output" with shape
  // 2 x 2 x 4:
  //
  //   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
  //   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
  //   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
  //   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
  //
  BlobShape shape = 1;

  // axis and num_axes control the portion of the bottom blob's shape that are
  // replaced by (included in) the reshape. By default (axis == 0 and
  // num_axes == -1), the entire bottom blob shape is included in the reshape,
  // and hence the shape field must specify the entire output shape.
  //
  // axis may be non-zero to retain some portion of the beginning of the input
  // shape (and may be negative to index from the end; e.g., -1 to begin the
  // reshape after the last axis, including nothing in the reshape,
  // -2 to include only the last axis, etc.).
  //
  // For example, suppose "input" is a 2D blob with shape 2 x 8.
  // Then the following ReshapeLayer specifications are all equivalent,
  // producing a blob "output" with shape 2 x 2 x 4:
  //
  //   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
  //   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
  //   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
  //
  // num_axes specifies the extent of the reshape.
  // If num_axes >= 0 (and axis >= 0), the reshape will be performed only on
  // input axes in the range [axis, axis+num_axes].
  // num_axes may also be -1, the default, to include all remaining axes
  // (starting from axis).
  //
  // For example, suppose "input" is a 2D blob with shape 2 x 8.
  // Then the following ReshapeLayer specifications are equivalent,
  // producing a blob "output" with shape 1 x 2 x 8.
  //
  //   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
  //   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
  //   reshape_param { shape { dim:  1  }  num_axes: 0 }
  //
  // On the other hand, these would produce output blob shape 2 x 1 x 8:
  //
  //   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
  //   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
  //
  int32 axis = 2;
  int32 num_axes = 3;
}

message ScaleParameter {
  // The first axis of bottom[0] (the first input Blob) along which to apply
  // bottom[1] (the second input Blob).  May be negative to index from the end
  // (e.g., -1 for the last axis).
  //
  // For example, if bottom[0] is 4D with shape 100x3x40x60, the output
  // top[0] will have the same shape, and bottom[1] may have any of the
  // following shapes (for the given value of axis):
  //    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
  //    (axis == 1 == -3)          3;     3x40;     3x40x60
  //    (axis == 2 == -2)                   40;       40x60
  //    (axis == 3 == -1)                                60
  // Furthermore, bottom[1] may have the empty shape (regardless of the value of
  // "axis") -- a scalar multiplier.
  int32 axis = 1;

  // (num_axes is ignored unless just one bottom is given and the scale is
  // a learned parameter of the layer.  Otherwise, num_axes is determined by the
  // number of axes by the second bottom.)
  // The number of axes of the input (bottom[0]) covered by the scale
  // parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
  // Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
  int32 num_axes = 2;

  // (filler is ignored unless just one bottom is given and the scale is
  // a learned parameter of the layer.)
  // The initialization for the learned scale parameter.
  // Default is the unit (1) initialization, resulting in the ScaleLayer
  // initially performing the identity operation.
  FillerParameter filler = 3;

  // Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
  // may be more efficient).  Initialized with bias_filler (defaults to 0).
  bool bias_term = 4;
  FillerParameter bias_filler = 5;
}

message SigmoidParameter {
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 1;
}

message SliceParameter {
  // The axis along which to slice -- may be negative to index from the end
  // (e.g., -1 for the last axis).
  // By default, SliceLayer concatenates blobs along the "channels" axis (1).
  int32 axis = 3;
  repeated uint32 slice_point = 2;

}

// Message that stores parameters used by SoftmaxLayer, SoftmaxWithLossLayer
message SoftmaxParameter {
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 1;

  // The axis along which to perform the softmax -- may be negative to index
  // from the end (e.g., -1 for the last axis).
  // Any other axes will be evaluated as independent softmaxes.
  oneof axis_oneof {
    int32 axis = 2;
  }
}

// Message that stores parameters used by SwishLayer
message SwishParameter {
  // Beta parameter for the Swish activation function
  // Described in:
  // Prajit Ramachandran, Barret Zoph, Quoc V. Le. (2017). Searching for
  // Activation Functions. https://arxiv.org/abs/1710.05941v2
  float beta = 1;
}

message TanHParameter {
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 1;
}

// Message that stores parameters used by TileLayer
message TileParameter {
  // The index of the axis to tile.
  int32 axis = 1;

  // The number of copies (tiles) of the blob to output.
  int32 tiles = 2;
}

// Message that stores parameters used by ThresholdLayer
message ThresholdParameter {
  float threshold = 1; // Strictly positive values
}

message WindowDataParameter {
  // Specify the data source.
  string source = 1;
  // For data pre-processing, we can do simple scaling and subtracting the
  // data mean, if provided. Note that the mean subtraction is always carried
  // out before scaling.
  float scale = 2;
  string mean_file = 3;
  // Specify the batch size.
  uint32 batch_size = 4;
  // Specify if we would like to randomly crop an image.
  uint32 crop_size = 5;
  // Specify if we want to randomly mirror data.
  bool mirror = 6;
  // Foreground (object) overlap threshold
  float fg_threshold = 7;
  // Background (non-object) overlap threshold
  float bg_threshold = 8;
  // Fraction of batch that should be foreground objects
  float fg_fraction = 9;
  // Amount of contextual padding to add around a window
  // (used only by the window_data_layer)
  uint32 context_pad = 10;
  // Mode for cropping out a detection window
  // warp: cropped window is warped to a fixed size and aspect ratio
  // square: the tightest square around the window is cropped
  string crop_mode = 11;
  // cache_images: will load all images in memory for faster access
  bool cache_images = 12;
  // append root_folder to locate images
  string root_folder = 13;
}

message SPPParameter {
  enum PoolMethod {
    MAX = 0;
    AVE = 1;
    STOCHASTIC = 2;
  }
  uint32 pyramid_height = 1;
  PoolMethod pool = 2; // The pooling method
  enum Engine {
    DEFAULT = 0;
    LATTE = 1;
    CUDNN = 2;
  }
  Engine engine = 6;
}

message PReLUParameter {
  // Parametric ReLU described in K. He et al, Delving Deep into Rectifiers:
  // Surpassing Human-Level Performance on ImageNet Classification, 2015.

  // Initial value of a_i. Default is a_i=0.25 for all i.
  FillerParameter filler = 1;
  // Whether or not slope parameters are shared across channels.
  bool channel_shared = 2;
}
